/** https://leetcode.com/problems/valid-parentheses/description/
 * @param {string} s
 * @return {boolean}
 */
var isValid = function(s) {

    const parenMap = {
        "(" : ")",
        "[" : "]",
        "{" : "}"
    }
    if(s.length == 0 || s.length == 1){
        return false;
    }

    const stack = []

    for(let char of s){
        if(parenMap[char]){
            
          stack.push(char)
        } else if(stack.length == 0 || parenMap[stack.pop()] !== char){
            return false
        }
    }

    return stack.length === 0 ? true : false
    
}

console.log(isValid("()[]{}"))


/*
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
*/